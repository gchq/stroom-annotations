/*
 * This file is generated by jOOQ.
*/
package stroom.db.annotations.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.db.annotations.Keys;
import stroom.db.annotations.tables.records.AnnotationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Annotations extends TableImpl<AnnotationsRecord> {

    private static final long serialVersionUID = -365710530;

    /**
     * The reference instance of <code>annotations.annotations</code>
     */
    public static final Annotations ANNOTATIONS_ = new Annotations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationsRecord> getRecordType() {
        return AnnotationsRecord.class;
    }

    /**
     * The column <code>annotations.annotations.id</code>.
     */
    public final TableField<AnnotationsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>annotations.annotations.content</code>.
     */
    public final TableField<AnnotationsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(2048).nullable(false), this, "");

    /**
     * The column <code>annotations.annotations.status</code>.
     */
    public final TableField<AnnotationsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>annotations.annotations</code> table reference
     */
    public Annotations() {
        this("annotations", null);
    }

    /**
     * Create an aliased <code>annotations.annotations</code> table reference
     */
    public Annotations(String alias) {
        this(alias, ANNOTATIONS_);
    }

    private Annotations(String alias, Table<AnnotationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Annotations(String alias, Table<AnnotationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return stroom.db.annotations.Annotations.ANNOTATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnnotationsRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnnotationsRecord>> getKeys() {
        return Arrays.<UniqueKey<AnnotationsRecord>>asList(Keys.KEY_ANNOTATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Annotations as(String alias) {
        return new Annotations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Annotations rename(String name) {
        return new Annotations(name, null);
    }
}
